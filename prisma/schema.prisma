// Prisma schema for Listen Bot
// Database: Supabase Postgres

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// Message model for storing Slack messages
model Message {
  /// Unique identifier for the message
  id String @id @default(cuid())
  
  /// Slack message ID (unique)
  slackId String @unique @map("slack_id")
  
  /// Message text content
  text String
  
  /// Slack user ID who sent the message
  userId String @map("user_id")
  
  /// Username of the sender
  username String
  
  /// Channel where message was sent
  channel String
  
  /// Slack timestamp (converted to DateTime)
  timestamp DateTime
  
  /// Thread timestamp - same as timestamp for parent messages, different for replies
  threadTs String? @map("thread_ts")
  
  /// Whether this is a thread reply (has threadTs different from slackId)
  isThreadReply Boolean @default(false) @map("is_thread_reply")
  
  /// Parent message (self-referential for thread support)
  parentMessageId String? @map("parent_message_id")
  parentMessage Message? @relation("ThreadReplies", fields: [parentMessageId], references: [id])
  
  /// Thread replies (child messages)
  threadReplies Message[] @relation("ThreadReplies")
  
  /// Record creation timestamp
  createdAt DateTime @default(now()) @map("created_at")
  
  /// Record update timestamp
  updatedAt DateTime @updatedAt @map("updated_at")

  /// Indexes for performance
  @@index([channel])
  @@index([timestamp])
  @@index([userId])
  @@index([threadTs])
  @@index([isThreadReply])
  @@index([parentMessageId])
  @@map("messages")
}

/// Slack webhook event log for audit trail and error recovery
model SlackEvent {
  /// Unique identifier for the event
  id String @id @default(cuid())
  
  /// Slack event ID (for deduplication)
  slackEventId String? @map("slack_event_id")
  
  /// Event type (event_callback, url_verification)
  eventType String @map("event_type")
  
  /// Event subtype (message, message_changed, message_deleted)
  eventSubtype String? @map("event_subtype")
  
  /// Raw payload from Slack
  payload Json
  
  /// Processing status
  status SlackEventStatus @default(PENDING)
  
  /// Error message if processing failed
  errorMessage String? @map("error_message")
  
  /// Number of processing attempts
  attempts Int @default(0)
  
  /// Last attempt timestamp
  lastAttemptAt DateTime? @map("last_attempt_at")
  
  /// Related message ID (if applicable)
  messageId String? @map("message_id")
  
  /// Channel where event occurred
  channel String?
  
  /// Record creation timestamp
  createdAt DateTime @default(now()) @map("created_at")
  
  /// Record update timestamp
  updatedAt DateTime @updatedAt @map("updated_at")

  /// Indexes for performance and querying
  @@index([slackEventId])
  @@index([status])
  @@index([eventType])
  @@index([createdAt])
  @@index([channel])
  @@map("slack_events")
}

/// Slack event processing status
enum SlackEventStatus {
  PENDING     // Received but not processed
  PROCESSING  // Currently being processed
  SUCCESS     // Successfully processed
  FAILED      // Failed after all retries
  SKIPPED     // Intentionally skipped (duplicate, etc.)
}

/// Channel model for future enhancements
model Channel {
  /// Unique identifier for the channel
  id String @id @default(cuid())
  
  /// Slack channel ID (unique)
  slackId String @unique @map("slack_id")
  
  /// Channel name
  name String
  
  /// Channel description
  description String?
  
  /// Whether channel is private
  isPrivate Boolean @default(false) @map("is_private")
  
  /// Record creation timestamp
  createdAt DateTime @default(now()) @map("created_at")
  
  /// Record update timestamp  
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("channels")
} 